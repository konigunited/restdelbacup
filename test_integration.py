import asyncio
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from business import BusinessRulesEngine

async def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Business Logic Core"""
    
    engine = BusinessRulesEngine()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_orders = [
        {
            "name": "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ñ—É—Ä—à–µ—Ç",
            "data": {
                "order_info": {"guests": 30, "event_type": "buffet", "date": "2025-02-15"},  # –î–∞—Ç–∞ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü
                "totals": {"total_weight": 10500, "total_cost": 75000},
                "menu_items": [
                    {"name": "–ö–∞–Ω–∞–ø–µ", "quantity": 50, "category": "–∫–∞–Ω–∞–ø–µ"},
                    {"name": "–°–∞–ª–∞—Ç", "quantity": 50, "category": "—Å–∞–ª–∞—Ç—ã"}  # –î–æ–±–∞–≤–∏–ª–∏ –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                ],
                "services": [{"name": "–û—Ñ–∏—Ü–∏–∞–Ω—Ç", "quantity": 2}]
            },
            "expected_status": "valid"
        },
        {
            "name": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–¥–æ—Å—Ç–∞—á–∞",
            "data": {
                "order_info": {"guests": 50, "event_type": "buffet"},
                "totals": {"total_weight": 8000, "total_cost": 45000},
                "menu_items": [{"name": "–ö–∞–Ω–∞–ø–µ", "quantity": 50}],
                "services": []
            },
            "expected_status": "critical"
        },
        {
            "name": "–ú–∞–ª—ã–π –∑–∞–∫–∞–∑",
            "data": {
                "order_info": {"guests": 5, "event_type": "coffee_break"},
                "totals": {"total_weight": 1500, "total_cost": 8000},
                "menu_items": [{"name": "–ö–æ—Ñ–µ", "quantity": 5}],
                "services": []
            },
            "expected_status": "error"
        }
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò BUSINESS LOGIC CORE")
    print("=" * 60)
    
    passed_tests = 0
    total_tests = len(test_orders)
    
    for i, test_case in enumerate(test_orders, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}/{total_tests}: {test_case['name']}")
        print("-" * 40)
        
        try:
            result = await engine.validate_order(test_case['data'])
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {result['overall_status']}")
            print(f"üìä –í–∞–ª–∏–¥–∞—Ü–∏–π: {result['summary']['total_validations']}")
            print(f"üéØ –û–∂–∏–¥–∞–ª—Å—è: {test_case['expected_status']}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result['overall_status'] == test_case['expected_status']:
                print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
                passed_tests += 1
            else:
                print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
            
            # –ü–æ–∫–∞–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º
            level_counts = result['summary']['by_level']
            print(f"üìà –ü–æ —É—Ä–æ–≤–Ω—è–º: INFO({level_counts.get('info', 0)}) "
                  f"WARNING({level_counts.get('warning', 0)}) "
                  f"ERROR({level_counts.get('error', 0)}) "
                  f"CRITICAL({level_counts.get('critical', 0)})")
            
            # –ü–æ–∫–∞–∑ –ø–µ—Ä–≤—ã—Ö 3 –≤–∞–ª–∏–¥–∞—Ü–∏–π
            print("üìù –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
            for j, validation in enumerate(result['validations'][:3], 1):
                print(f"  {j}. {validation['message']}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if result['recommendations']:
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for rec in result['recommendations'][:2]:
                    print(f"  ‚Ä¢ {rec}")
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
            import traceback
            traceback.print_exc()
    
    print("\n" + "=" * 60)
    print(f"üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ Business Logic Core –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏.")
    
    return passed_tests == total_tests

async def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüöÄ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("-" * 30)
    
    engine = BusinessRulesEngine()
    
    test_data = {
        "order_info": {"guests": 100, "event_type": "banquet"},
        "totals": {"total_weight": 80000, "total_cost": 450000},
        "menu_items": [{"name": "–ë–ª—é–¥–æ", "category": "–æ—Å–Ω–æ–≤–Ω–æ–µ"}],
        "services": [{"name": "–û—Ñ–∏—Ü–∏–∞–Ω—Ç", "quantity": 5}]
    }
    
    import time
    
    # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
    start_time = time.time()
    for i in range(10):
        await engine.validate_order(test_data)
    end_time = time.time()
    
    avg_time = (end_time - start_time) / 10
    print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {avg_time:.3f} —Å–µ–∫")
    
    if avg_time < 0.1:
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–Ω–∞—è!")
    elif avg_time < 0.5:
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è!")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")

if __name__ == "__main__":
    async def main():
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        success = await test_integration()
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await test_performance()
        
        return success
    
    result = asyncio.run(main())