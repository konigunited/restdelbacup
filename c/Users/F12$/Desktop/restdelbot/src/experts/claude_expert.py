import json
import logging
from typing import Dict, Optional
import anthropic
from .prompts import SYSTEM_PROMPT

logger = logging.getLogger(__name__)

class ClaudeExpert:
    def __init__(self, api_key: str):
        self.client = anthropic.Anthropic(api_key=api_key)
        
    async def analyze_request(self, text: str) -> Dict:
        try:
            logger.info(f"Analyzing request: {text[:100]}...")
            
            message = self.client.messages.create(
                model="claude-sonnet-4-20250514",  # Claude 4 Sonnet
                max_tokens=4000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è Claude 4
                temperature=0.1,
                system=SYSTEM_PROMPT,
                messages=[{
                    "role": "user",
                    "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {text}"
                }]
            )
            
            response_text = message.content[0].text
            logger.info(f"Claude 4 response: {response_text}")
            
            json_data = self._extract_json(response_text)
            
            if not json_data:
                # Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥
                json_data = self._fallback_parsing(response_text, text)
                
            validated_data = self._validate_response(json_data)
            
            return validated_data
            
        except Exception as e:
            logger.error(f"Error analyzing request: {str(e)}")
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ Claude –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
            return self._create_fallback_response(text)
    
    def _extract_json(self, text: str) -> Optional[Dict]:
        try:
            # –ò—â–µ–º JSON –±–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ Claude
            start_idx = text.find('{')
            end_idx = text.rfind('}') + 1
            
            if start_idx == -1 or end_idx == 0:
                return None
                
            json_str = text[start_idx:end_idx]
            return json.loads(json_str)
            
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse JSON from: {text[:200]}... Error: {e}")
            return None
    
    def _fallback_parsing(self, response_text: str, original_text: str) -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –µ—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        logger.info("Using fallback parsing...")
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        text_lower = original_text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_type = "—Ñ—É—Ä—à–µ—Ç"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if "–±–∞–Ω–∫–µ—Ç" in text_lower:
            event_type = "–±–∞–Ω–∫–µ—Ç"
        elif "–∫–æ—Ñ–µ-–±—Ä–µ–π–∫" in text_lower or "–∫–æ—Ñ–µ –±—Ä–µ–π–∫" in text_lower:
            event_type = "–∫–æ—Ñ–µ-–±—Ä–µ–π–∫"
        elif "—Ñ—É—Ä—à–µ—Ç" in text_lower:
            event_type = "—Ñ—É—Ä—à–µ—Ç"
        
        # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π
        import re
        guests_match = re.search(r'(\d+)\s*(?:—á–µ–ª–æ–≤–µ–∫|–ø–µ—Ä—Å–æ–Ω|–≥–æ—Å—Ç)', text_lower)
        guests_count = int(guests_match.group(1)) if guests_match else 0
        
        # –ò—â–µ–º –±—é–¥–∂–µ—Ç
        budget_match = re.search(r'(\d+)(?:\s*(?:—Ç—ã—Å|000|—Ä—É–±–ª))', text_lower)
        budget = int(budget_match.group(1)) * 1000 if budget_match else 0
        
        return {
            "event_type": event_type,
            "guests_count": guests_count,
            "budget_limit": budget,
            "confidence_level": 0.6,
            "missing_info": ["–¥–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"] if "–∏—é–ª" not in text_lower and "–¥–∞—Ç–∞" not in text_lower else []
        }
    
    def _create_fallback_response(self, text: str) -> Dict:
        """–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ API"""
        return {
            "event_type": "—Ñ—É—Ä—à–µ—Ç",
            "guests_count": 0,
            "event_date": "",
            "event_time": "",
            "duration_hours": 2,
            "need_service": False,
            "need_equipment": False,
            "budget_limit": 0,
            "dietary_restrictions": [],
            "special_requests": "",
            "gramm_per_guest": 300,
            "service_staff": {"waiters": 0, "cooks": 0, "manager": False},
            "confidence_level": 0.1,
            "missing_info": ["–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–±—É—é—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è"]
        }
    
    def _validate_response(self, data: Dict) -> Dict:
        required_fields = {
            'event_type': '—Ñ—É—Ä—à–µ—Ç',
            'guests_count': 0,
            'event_date': '',
            'event_time': '',
            'duration_hours': 2,
            'need_service': False,
            'need_equipment': False,
            'budget_limit': 0,
            'dietary_restrictions': [],
            'special_requests': '',
            'gramm_per_guest': 300,
            'service_staff': {
                'waiters': 0,
                'cooks': 0,
                'manager': False
            },
            'confidence_level': 0.5,
            'missing_info': []
        }
        
        for field, default_value in required_fields.items():
            if field not in data:
                data[field] = default_value
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if data['guests_count'] <= 0:
            data['missing_info'].append('–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π')
            data['confidence_level'] = min(data['confidence_level'], 0.3)
        
        return data
    
    def get_analysis_summary(self, data: Dict) -> str:
        event_types = {
            '–∫–æ—Ñ–µ-–±—Ä–µ–π–∫': '–ö–æ—Ñ–µ-–±—Ä–µ–π–∫',
            '—Ñ—É—Ä—à–µ—Ç': '–§—É—Ä—à–µ—Ç', 
            '–±–∞–Ω–∫–µ—Ç': '–ë–∞–Ω–∫–µ—Ç',
            '—Ñ—É—Ä—à–µ—Ç_—Å_–≥–æ—Ä—è—á–∏–º': '–§—É—Ä—à–µ—Ç —Å –≥–æ—Ä—è—á–∏–º'
        }
        
        summary = f"ü§ñ –ê–Ω–∞–ª–∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (Claude 4):\n\n"
        summary += f"üé™ –¢–∏–ø: {event_types.get(data['event_type'], data['event_type'])}\n"
        summary += f"üë• –ì–æ—Å—Ç–∏: {data['guests_count']} —á–µ–ª–æ–≤–µ–∫\n"
        
        if data['event_date']:
            summary += f"üìÖ –î–∞—Ç–∞: {data['event_date']}\n"
        if data['event_time']:
            summary += f"‚è∞ –í—Ä–µ–º—è: {data['event_time']}\n"
        
        summary += f"üçΩÔ∏è –ì—Ä–∞–º–º–æ–≤–∫–∞: {data['gramm_per_guest']}–≥ –Ω–∞ –≥–æ—Å—Ç—è\n"
        
        if data['need_service']:
            summary += f"üë®‚Äçüç≥ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ: –î–∞\n"
        
        if data['budget_limit']:
            summary += f"üí∞ –ë—é–¥–∂–µ—Ç: –¥–æ {data['budget_limit']:,} —Ä—É–±.\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_emoji = "üü¢" if data['confidence_level'] > 0.7 else "üü°" if data['confidence_level'] > 0.4 else "üî¥"
        summary += f"{confidence_emoji} –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {data['confidence_level']:.0%}\n"
        
        if data['missing_info']:
            summary += f"\n‚ùó –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å: {', '.join(data['missing_info'])}"
        
        return summary