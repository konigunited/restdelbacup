"""
Enhanced logging configuration for expert system
"""
import logging
import json
import sys
from typing import Any, Dict, Optional
from datetime import datetime
from config.settings import settings

class ExpertLogger:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, name: str = "expert_system"):
        self.logger = logging.getLogger(name)
        self._setup_logger()
    
    def _setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        if not self.logger.handlers:
            # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            console_handler = logging.StreamHandler(sys.stdout)
            
            # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
            formatter = logging.Formatter(
                fmt=settings.LOG_FORMAT,
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            console_handler.setFormatter(formatter)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            self.logger.addHandler(console_handler)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            log_level = getattr(logging, settings.LOG_LEVEL.upper(), logging.INFO)
            self.logger.setLevel(log_level)
            
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
            self.logger.propagate = False
    
    def info(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        if settings.DETAILED_LOGGING:
            context = self._format_context(**kwargs)
            self.logger.info(f"{message} {context}")
        else:
            self.logger.info(message)
    
    def error(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        context = self._format_context(**kwargs)
        self.logger.error(f"{message} {context}")
    
    def warning(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        context = self._format_context(**kwargs)
        self.logger.warning(f"{message} {context}")
    
    def debug(self, message: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if settings.DEBUG:
            context = self._format_context(**kwargs)
            self.logger.debug(f"{message} {context}")
    
    def expert_start(self, expert_name: str, operation: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        self.info(
            f"ü§ñ {expert_name} starting {operation}",
            expert=expert_name,
            operation=operation,
            timestamp=datetime.now().isoformat(),
            **kwargs
        )
    
    def expert_complete(self, expert_name: str, operation: str, duration_ms: int = None, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        duration_info = f" in {duration_ms}ms" if duration_ms else ""
        self.info(
            f"‚úÖ {expert_name} completed {operation}{duration_info}",
            expert=expert_name,
            operation=operation,
            duration_ms=duration_ms,
            **kwargs
        )
    
    def expert_error(self, expert_name: str, operation: str, error: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        self.error(
            f"‚ùå {expert_name} failed {operation}: {error}",
            expert=expert_name,
            operation=operation,
            error=error,
            **kwargs
        )
    
    def claude_request(self, expert_name: str, request_id: int, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude API"""
        self.debug(
            f"üì° {expert_name} ‚Üí Claude API request #{request_id}",
            expert=expert_name,
            request_id=request_id,
            **kwargs
        )
    
    def claude_response(self, expert_name: str, request_id: int, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude API"""
        self.debug(
            f"üì° {expert_name} ‚Üê Claude API response #{request_id}",
            expert=expert_name,
            request_id=request_id,
            **kwargs
        )
    
    def workflow_stage(self, stage: str, session_id: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ workflow"""
        self.info(
            f"üîÑ Workflow stage: {stage}",
            stage=stage,
            session_id=session_id,
            **kwargs
        )
    
    def performance_metric(self, metric_name: str, value: Any, unit: str = "", **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.info(
            f"üìä Performance: {metric_name} = {value}{unit}",
            metric=metric_name,
            value=value,
            unit=unit,
            **kwargs
        )
    
    def business_event(self, event: str, **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π"""
        self.info(
            f"üíº Business event: {event}",
            event=event,
            **kwargs
        )
    
    def _format_context(self, **kwargs) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤"""
        if not kwargs:
            return ""
        
        # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏ –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã
        clean_context = {}
        for key, value in kwargs.items():
            if value is not None:
                if isinstance(value, (dict, list)):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    str_value = str(value)
                    if len(str_value) > 500:
                        clean_context[key] = f"<{type(value).__name__} size={len(str_value)}>"
                    else:
                        clean_context[key] = value
                elif isinstance(value, str) and len(value) > 200:
                    clean_context[key] = f"{value[:200]}..."
                else:
                    clean_context[key] = value
        
        try:
            return f"| {json.dumps(clean_context, ensure_ascii=False, default=str)}"
        except (TypeError, ValueError):
            # Fallback –¥–ª—è –Ω–µ-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            return f"| {str(clean_context)}"

class ExpertPerformanceLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, logger: ExpertLogger):
        self.logger = logger
        self.metrics = {}
    
    def start_timer(self, operation: str) -> str:
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        timer_id = f"{operation}_{datetime.now().timestamp()}"
        self.metrics[timer_id] = {
            "operation": operation,
            "start_time": datetime.now(),
            "status": "running"
        }
        return timer_id
    
    def end_timer(self, timer_id: str, success: bool = True, **kwargs):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞"""
        if timer_id in self.metrics:
            metric = self.metrics[timer_id]
            duration = datetime.now() - metric["start_time"]
            duration_ms = int(duration.total_seconds() * 1000)
            
            metric.update({
                "end_time": datetime.now(),
                "duration_ms": duration_ms,
                "status": "success" if success else "error"
            })
            
            self.logger.performance_metric(
                f"{metric['operation']}_duration",
                duration_ms,
                "ms",
                success=success,
                **kwargs
            )
            
            return duration_ms
        return 0
    
    def get_metrics_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –º–µ—Ç—Ä–∏–∫"""
        completed_metrics = [m for m in self.metrics.values() if m.get("duration_ms")]
        
        if not completed_metrics:
            return {"total_operations": 0}
        
        durations = [m["duration_ms"] for m in completed_metrics]
        successes = [m for m in completed_metrics if m["status"] == "success"]
        
        return {
            "total_operations": len(completed_metrics),
            "successful_operations": len(successes),
            "success_rate": len(successes) / len(completed_metrics) * 100,
            "avg_duration_ms": sum(durations) / len(durations),
            "min_duration_ms": min(durations),
            "max_duration_ms": max(durations)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ª–æ–≥–≥–µ—Ä–æ–≤
logger = ExpertLogger("eventbot_experts")
performance_logger = ExpertPerformanceLogger(logger)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
logger.info("EventBot 5.0 Expert System Logger initialized", 
           log_level=settings.LOG_LEVEL,
           detailed_logging=settings.DETAILED_LOGGING,
           debug_mode=settings.DEBUG)