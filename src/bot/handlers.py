import logging
import json
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from ..gemini.expert import GeminiExpert
from ..sheets.generator import SheetsGenerator
from ..config import Config

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
TRANSLATIONS = {
    "event_type": "—Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "guests_count": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π",
    "event_date": "–¥–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "event_time": "–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞",
    "duration_hours": "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —á–∞—Å–∞—Ö)",
    "need_service": "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
    "need_equipment": "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–æ–ø. –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "budget_limit": "–±—é–¥–∂–µ—Ç",
    "dietary_restrictions": "–¥–∏–µ—ÇÔøΩÔøΩ—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
    "special_requests": "–æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
}

class QuoteStates(StatesGroup):
    waiting_for_request = State()
    waiting_for_details = State()
    waiting_for_budget = State()
    confirming_proposal = State()
    editing_proposal = State()

router = Router()

def get_proposal_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Å–º–µ—Ç—É!", callback_data="accept_proposal")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –≤ –º–µ–Ω—é", callback_data="edit_proposal")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ])

async def answer_with_fallback(message_or_callback, text, **kwargs):
    try:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(text, parse_mode="Markdown", **kwargs)
        elif isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.edit_text(text, parse_mode="Markdown", **kwargs)
    except TelegramBadRequest:
        logger.warning("Markdown parsing failed. Sending as plain text.")
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(text, **kwargs)
        elif isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.answer(text, **kwargs)
            await message_or_callback.message.delete()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Rest Delivery. –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –Ω–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º.")

@router.message(Command("new"))
async def cmd_new_quote(message: Message, state: FSMContext):
    await state.set_state(QuoteStates.waiting_for_request)
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π, –¥–∞—Ç–∞, –±—é–¥–∂–µ—Ç –∏ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è.")

async def generate_proposal_flow(message: Message, state: FSMContext, menu_json: str):
    processing_msg = await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–¥–±–∏—Ä–∞—é –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...")
    try:
        fsm_data = await state.get_data()
        event_details = fsm_data.get('event_details', {})

        gemini_expert = GeminiExpert(Config.GEMINI_API_KEY)
        proposal_json = await gemini_expert.generate_proposal(event_details, menu_json)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç Gemini –Ω–µ –ø—É—Å—Ç–æ–π
        if not proposal_json:
            logger.error("Received None from generate_proposal. Aborting flow.")
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await state.clear()
            return

        if proposal_json.get("error"):
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await state.clear()
            return

        await state.update_data(proposal_json=proposal_json)
        formatted_text = gemini_expert.format_proposal_for_telegram(proposal_json)
        
        await processing_msg.delete()
        await answer_with_fallback(message, formatted_text, reply_markup=get_proposal_keyboard())
        await state.set_state(QuoteStates.confirming_proposal)
    except Exception as e:
        logger.error(f"Critical error in generate_proposal_flow: {e}")
        await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(QuoteStates.waiting_for_request)
async def process_initial_request(message: Message, state: FSMContext, menu_json: str):
    await state.update_data(initial_request=message.text)
    await process_details_flow(message, state, menu_json)

@router.message(QuoteStates.waiting_for_details)
async def process_details(message: Message, state: FSMContext, menu_json: str):
    fsm_data = await state.get_data()
    updated_request = fsm_data.get('initial_request', '') + ". " + message.text
    await state.update_data(initial_request=updated_request)
    await process_details_flow(message, state, menu_json)

async def process_details_flow(message: Message, state: FSMContext, menu_json: str):
    analysis_msg = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    try:
        fsm_data = await state.get_data()
        request_text = fsm_data.get('initial_request', '')

        gemini_expert = GeminiExpert(Config.GEMINI_API_KEY)
        event_details = await gemini_expert.analyze_request(request_text)
        
        await analysis_msg.delete()

        if event_details.get("error"):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
            return

        await state.update_data(event_details=event_details)

        missing_info = event_details.get('missing_info', [])
        if missing_info:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            translated_missing_info = [TRANSLATIONS.get(term, term) for term in missing_info]
            await message.answer(f"–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: {', '.join(translated_missing_info)}?")
            await state.set_state(QuoteStates.waiting_for_details)
            return

        if not event_details.get('budget_limit') or event_details.get('budget_limit') == 0:
            await message.answer("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–Ω—è—Ç–Ω—ã. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É –≤–∞—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç?")
            await state.set_state(QuoteStates.waiting_for_budget)
        else:
            await generate_proposal_flow(message, state, menu_json)

    except Exception as e:
        logger.error(f"Critical error in process_details_flow: {e}")
        await analysis_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(QuoteStates.waiting_for_budget)
async def process_budget(message: Message, state: FSMContext, menu_json: str):
    budget_text = message.text
    try:
        cleaned_text = ''.join(filter(str.isdigit, budget_text))
        budget = int(cleaned_text)
        
        fsm_data = await state.get_data()
        event_details = fsm_data.get('event_details', {})
        event_details['budget_limit'] = budget
        
        await state.update_data(event_details=event_details)
        await generate_proposal_flow(message, state, menu_json)

    except (ValueError, TypeError):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç —Ü–∏—Ñ—Ä–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: 35000")
        return

@router.callback_query(F.data == "edit_proposal", QuoteStates.confirming_proposal)
async def edit_proposal_prompt(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ó–∞–º–µ–Ω–∏—Ç–µ —Ä—ã–±—É –Ω–∞ –∫—É—Ä–∏—Ü—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏—Ö –∑–∞–∫—É—Å–æ–∫¬ª.")
    await state.set_state(QuoteStates.editing_proposal)

@router.message(QuoteStates.editing_proposal)
async def process_proposal_edits(message: Message, state: FSMContext, menu_json: str):
    await message.answer("üîÑ –í–Ω–æ—à—É –ø—Ä–∞–≤–∫–∏ –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ãÔøΩÔøΩ–∞—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...")
    try:
        fsm_data = await state.get_data()
        event_details = fsm_data.get('event_details')
        previous_proposal_json = fsm_data.get('proposal_json')
        user_edits = message.text

        gemini_expert = GeminiExpert(Config.GEMINI_API_KEY)
        
        new_proposal_json = await gemini_expert.generate_proposal(
            event_details=event_details,
            menu_json=menu_json,
            previous_menu=json.dumps(previous_proposal_json, ensure_ascii=False),
            user_edits=user_edits
        )

        if new_proposal_json.get("error"):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∫–∏ –∏–Ω–∞—á–µ.")
            return

        await state.update_data(proposal_json=new_proposal_json)
        formatted_text = gemini_expert.format_proposal_for_telegram(new_proposal_json)
        
        await answer_with_fallback(message, formatted_text, reply_markup=get_proposal_keyboard())
        await state.set_state(QuoteStates.confirming_proposal)

    except Exception as e:
        logger.error(f"Error in process_proposal_edits: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")

@router.callback_query(F.data == "accept_proposal", QuoteStates.confirming_proposal)
async def accept_proposal_and_create_quote(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –§–∏–∫—Å–∏—Ä—É–µ–º –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–º–µ—Ç—É –≤ Google Sheets...")
    try:
        fsm_data = await state.get_data()
        analysis_result = fsm_data.get('event_details', {})
        
        sheets_generator = SheetsGenerator(Config.GOOGLE_CREDENTIALS_PATH)
        template_type = sheets_generator.determine_template_type(analysis_result)
        template_id = Config.SIMPLE_TEMPLATE_ID if template_type == 'simple' else Config.COMPLEX_TEMPLATE_ID
        
        pdf_link = await sheets_generator.create_quote_from_template(template_id, analysis_result)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –ö–ü (PDF)", url=pdf_link)],
            [InlineKeyboardButton(text="üìä –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ—Ç—É", callback_data="new_quote_final")]
        ])
        await callback.message.answer("üéâ –í–∞—à–µ ÔøΩÔøΩ–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!", reply_markup=keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"Error in accept_proposal_and_create_quote: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF-—Å–º–µ—Ç—ã.")

@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.callback_query(F.data == "new_quote_final")
async def new_quote_final_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await cmd_new_quote(callback.message, state)