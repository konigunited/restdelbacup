import logging
import json
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from ..gemini.expert import GeminiExpert
from ..sheets.generator import SheetsGenerator
from ..config import Config

logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class QuoteStates(StatesGroup):
    waiting_for_request = State()
    confirming_proposal = State()
    editing_proposal = State()

router = Router()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É", callback_data="start_new_quote")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")],
        [InlineKeyboardButton(text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", url="https://restdelivery.ru/menu/")]
    ])

def get_proposal_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Ç–æ–≤—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Å–º–µ—Ç—É!", callback_data="accept_proposal")],
        [InlineKeyboardButton(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", callback_data="edit_proposal")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
    ])

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def answer_with_fallback(message_or_callback, text, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑–±–µ–≥–∞—è –ø–∞–¥–µ–Ω–∏–π."""
    try:
        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(text, parse_mode="Markdown", **kwargs)
        elif isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.answer()
            await message_or_callback.message.edit_text(text, parse_mode="Markdown", **kwargs)
    except TelegramBadRequest as e:
        logger.warning(f"Failed to send/edit message with Markdown: {e}. Sending as plain text.")
        current_message = message_or_callback.message if isinstance(message_or_callback, CallbackQuery) else message_or_callback
        await current_message.answer(text, **kwargs)
        if isinstance(message_or_callback, CallbackQuery):
            try:
                await message_or_callback.message.delete()
            except TelegramBadRequest:
                pass

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def show_main_menu(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    await state.clear()
    await message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Rest Delivery. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=get_main_menu_keyboard()
    )

@router.message(Command("start", "help", "new"))
async def cmd_start_new(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /start, /help, /new."""
    await show_main_menu(message, state)

@router.message(StateFilter(None))
async def any_message_handler(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await show_main_menu(message, state)

@router.callback_query(F.data == "show_help")
async def show_help_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    help_text = (
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–º–µ—Ç—É –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ **'–°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É'**.\n"
        "2. –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "3. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂—É –º–µ–Ω—é.\n"
        "4. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—Ç—å PDF-–¥–æ–∫—É–º–µ–Ω—Ç.\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ /start."
    )
    await answer_with_fallback(callback, help_text, reply_markup=get_main_menu_keyboard())

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–æ—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã ---
@router.callback_query(F.data == "start_new_quote")
async def start_new_quote(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ—Ç—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    await state.set_state(QuoteStates.waiting_for_request)
    prompt_text = (
        "üìù **–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π:\n"
        "- **–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è** (—Ñ—É—Ä—à–µ—Ç, –±–∞–Ω–∫–µ—Ç, –∫–æ—Ñ–µ-–±—Ä–µ–π–∫)\n"
        "- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π**\n"
        "- **–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è** –Ω–∞—á–∞–ª–∞\n"
        "- **–ë—é–¥–∂–µ—Ç** (–ø—Ä–∏–º–µ—Ä–Ω—ã–π)\n"
        "- **–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è** –∏–ª–∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ—Ç–≤–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
    )
    await answer_with_fallback(callback, prompt_text)

@router.message(QuoteStates.waiting_for_request)
async def process_request_and_generate_proposal(message: Message, state: FSMContext, menu_json: str):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."""
    processing_msg = await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–¥–±–∏—Ä–∞—é –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
    try:
        gemini_expert = GeminiExpert(Config.GEMINI_API_KEY)
        
        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        event_details = await gemini_expert.analyze_request(message.text)
        if not event_details or event_details.get("error"):
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –µ–≥–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —É–∫–∞–∑–∞–≤ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.", reply_markup=get_main_menu_keyboard())
            await state.clear()
            return
            
        await state.update_data(event_details=event_details)

        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        proposal_json = await gemini_expert.generate_proposal(event_details, menu_json)
        if not proposal_json or proposal_json.get("error"):
            error_text = proposal_json.get("error", "–æ—Ç–≤–µ—Ç –±—ã–ª –ø—É—Å—Ç—ã–º") if proposal_json else "–æ—Ç–≤–µ—Ç –±—ã–ª –ø—É—Å—Ç—ã–º"
            await processing_msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ({error_text}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–∞—á–∞–≤ —Å /start.")
            await state.clear()
            return

        await state.update_data(proposal_json=proposal_json)
        formatted_text = gemini_expert.format_proposal_for_telegram(proposal_json)
        
        await processing_msg.delete()
        await message.answer(formatted_text, reply_markup=get_proposal_keyboard(), parse_mode="Markdown")
        await state.set_state(QuoteStates.confirming_proposal)

    except Exception as e:
        logger.error(f"Critical error in process_request_and_generate_proposal: {e}", exc_info=True)
        await processing_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –Ω–∞—á–∞–≤ —Å /start.")
        await state.clear()

# --- –§–ª–æ—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@router.callback_query(F.data == "edit_proposal", QuoteStates.confirming_proposal)
async def edit_proposal_prompt(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏."""
    await answer_with_fallback(callback, "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–º–µ–Ω–∏—Ç–µ —Ä—ã–±—É –Ω–∞ –∫—É—Ä–∏—Ü—É¬ª).")
    await state.set_state(QuoteStates.editing_proposal)

@router.message(QuoteStates.editing_proposal)
async def process_proposal_edits(message: Message, state: FSMContext, menu_json: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."""
    processing_msg = await message.answer("üîÑ –í–Ω–æ—à—É –ø—Ä–∞–≤–∫–∏...")
    try:
        fsm_data = await state.get_data()
        gemini_expert = GeminiExpert(Config.GEMINI_API_KEY)
        
        new_proposal_json = await gemini_expert.generate_proposal(
            event_details=fsm_data.get('event_details'),
            menu_json=menu_json,
            previous_menu=json.dumps(fsm_data.get('proposal_json'), ensure_ascii=False),
            user_edits=message.text
        )

        if not new_proposal_json or new_proposal_json.get("error"):
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∫–∏ –∏–Ω–∞—á–µ.")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            await state.set_state(QuoteStates.confirming_proposal)
            return

        await state.update_data(proposal_json=new_proposal_json)
        formatted_text = gemini_expert.format_proposal_for_telegram(new_proposal_json)
        
        await processing_msg.delete()
        await message.answer(formatted_text, reply_markup=get_proposal_keyboard(), parse_mode="Markdown")
        await state.set_state(QuoteStates.confirming_proposal)

    except Exception as e:
        logger.error(f"Error in process_proposal_edits: {e}", exc_info=True)
        await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        await state.set_state(QuoteStates.confirming_proposal)

@router.callback_query(F.data == "accept_proposal", QuoteStates.confirming_proposal)
async def accept_proposal_and_create_quote(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç PDF-—Å–º–µ—Ç—É."""
    await answer_with_fallback(callback, "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–æ–∑–¥–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–º–µ—Ç—É –≤ Google Sheets...")
    try:
        fsm_data = await state.get_data()
        final_details = fsm_data.get('event_details', {})
        
        sheets_generator = SheetsGenerator(Config.GOOGLE_CREDENTIALS_PATH)
        pdf_link = await sheets_generator.create_quote_from_template(Config.SIMPLE_TEMPLATE_ID, final_details)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –ö–ü (PDF)", url=pdf_link)],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.answer("üéâ –í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!", reply_markup=keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"Error in accept_proposal_and_create_quote: {e}", exc_info=True)
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF-—Å–º–µ—Ç—ã.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é ---
@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await answer_with_fallback(callback, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await show_main_menu(callback.message, state)

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    await answer_with_fallback(callback, "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?")
    await show_main_menu(callback.message, state)
