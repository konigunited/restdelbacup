from typing import List, Dict, Any
from datetime import datetime, timedelta
from .standards import BusinessStandards, ValidationResult, ValidationLevel

class PortionValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –≥—Ä–∞–º–º–æ–≤–∫–∏"""
    
    @staticmethod
    def validate(order_data: Dict[str, Any]) -> List[ValidationResult]:
        results = []
        
        guests = order_data.get('order_info', {}).get('guests', 0)
        event_type = order_data.get('order_info', {}).get('event_type', 'buffet')
        total_weight = order_data.get('totals', {}).get('total_weight', 0)
        
        if guests <= 0:
            results.append(ValidationResult(
                level=ValidationLevel.ERROR,
                message="‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
                field="guests",
                recommendation="–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π"
            ))
            return results
        
        grams_per_guest = total_weight / guests
        standards = BusinessStandards.PORTION_STANDARDS.get(event_type, 
                                                           BusinessStandards.PORTION_STANDARDS['buffet'])
        
        if grams_per_guest < 250:
            results.append(ValidationResult(
                level=ValidationLevel.CRITICAL,
                message=f"üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–¥—ã! {grams_per_guest:.0f}–≥ < 250–≥ –Ω–∞ –≥–æ—Å—Ç—è",
                field="portion_size",
                recommendation="–£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥ –º–∏–Ω–∏–º—É–º –¥–æ 250–≥ –Ω–∞ –≥–æ—Å—Ç—è"
            ))
        elif grams_per_guest > 750:
            results.append(ValidationResult(
                level=ValidationLevel.WARNING,
                message=f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –µ–¥—ã: {grams_per_guest:.0f}–≥ > 750–≥ –Ω–∞ –≥–æ—Å—Ç—è",
                field="portion_size",
                recommendation="–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ—Ä—Ü–∏–π"
            ))
        elif standards['min'] <= grams_per_guest <= standards['max']:
            results.append(ValidationResult(
                level=ValidationLevel.INFO,
                message=f"‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≥—Ä–∞–º–º–æ–≤–∫–∞: {grams_per_guest:.0f}–≥ –¥–ª—è {event_type}",
                field="portion_size",
                recommendation="–ì—Ä–∞–º–º–æ–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
                reference_case="P-39454"
            ))
        else:
            results.append(ValidationResult(
                level=ValidationLevel.WARNING,
                message=f"‚ö†Ô∏è –ì—Ä–∞–º–º–æ–≤–∫–∞ –≤–Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {grams_per_guest:.0f}–≥ –¥–ª—è {event_type}",
                field="portion_size",
                recommendation=f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {standards['min']}-{standards['max']}–≥"
            ))
        
        return results

class CostValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    
    @staticmethod
    def validate(order_data: Dict[str, Any]) -> List[ValidationResult]:
        results = []
        
        guests = order_data.get('order_info', {}).get('guests', 0)
        event_type = order_data.get('order_info', {}).get('event_type', 'buffet')
        total_cost = order_data.get('totals', {}).get('total_cost', 0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        if total_cost < BusinessStandards.MIN_ORDER_AMOUNT:
            results.append(ValidationResult(
                level=ValidationLevel.ERROR,
                message=f"‚ùå –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {total_cost:,}‚ÇΩ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {BusinessStandards.MIN_ORDER_AMOUNT:,}‚ÇΩ",
                field="total_cost",
                recommendation=f"–£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–∫–∞–∑ –¥–æ {BusinessStandards.MIN_ORDER_AMOUNT:,}‚ÇΩ"
            ))
            return results
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞ –≥–æ—Å—Ç—è
        if guests > 0:
            cost_per_guest = total_cost / guests
            cost_range = BusinessStandards.COST_PER_GUEST_RANGES.get(event_type, 
                                                                   BusinessStandards.COST_PER_GUEST_RANGES['buffet'])
            
            if cost_per_guest < cost_range['min'] * 0.7:
                results.append(ValidationResult(
                    level=ValidationLevel.WARNING,
                    message=f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –≥–æ—Å—Ç—è: {cost_per_guest:,.0f}‚ÇΩ",
                    field="cost_per_guest",
                    recommendation=f"–û–∂–∏–¥–∞–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {cost_range['min']:,}-{cost_range['max']:,}‚ÇΩ"
                ))
            elif cost_per_guest > cost_range['max'] * 1.5:
                results.append(ValidationResult(
                    level=ValidationLevel.WARNING,
                    message=f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –≥–æ—Å—Ç—è: {cost_per_guest:,.0f}‚ÇΩ",
                    field="cost_per_guest",
                    recommendation=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞"
                ))
            else:
                results.append(ValidationResult(
                    level=ValidationLevel.INFO,
                    message=f"‚úÖ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {total_cost:,}‚ÇΩ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º",
                    field="total_cost",
                    recommendation="–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"
                ))
        
        return results

class ServiceValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —É—Å–ª—É–≥ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    
    @staticmethod
    def validate(order_data: Dict[str, Any]) -> List[ValidationResult]:
        results = []
        
        guests = order_data.get('order_info', {}).get('guests', 0)
        services = order_data.get('services', [])
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤
        waiter_count = 0
        for service in services:
            if '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç' in service.get('name', '').lower():
                waiter_count += service.get('quantity', 0)
        
        if waiter_count > 0:
            min_waiters = max(1, guests // BusinessStandards.WAITER_RATIO_SIMPLE)
            max_waiters = max(2, guests // BusinessStandards.WAITER_RATIO_COMPLEX)
            
            if waiter_count < min_waiters:
                results.append(ValidationResult(
                    level=ValidationLevel.WARNING,
                    message=f"‚ö†Ô∏è –ú–∞–ª–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤: {waiter_count} –¥–ª—è {guests} –≥–æ—Å—Ç–µ–π",
                    field="waiter_count",
                    recommendation=f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –º–∏–Ω–∏–º—É–º {min_waiters} –æ—Ñ–∏—Ü–∏–∞–Ω—Ç(–æ–≤)"
                ))
            elif waiter_count > max_waiters:
                results.append(ValidationResult(
                    level=ValidationLevel.WARNING,
                    message=f"‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤: {waiter_count} –¥–ª—è {guests} –≥–æ—Å—Ç–µ–π",
                    field="waiter_count",
                    recommendation=f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {min_waiters}-{max_waiters}"
                ))
            else:
                results.append(ValidationResult(
                    level=ValidationLevel.INFO,
                    message=f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ: {waiter_count}",
                    field="waiter_count",
                    recommendation="–ü–µ—Ä—Å–æ–Ω–∞–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"
                ))
        
        return results

class TimingValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    
    @staticmethod
    def validate(order_data: Dict[str, Any]) -> List[ValidationResult]:
        results = []
        
        event_date = order_data.get('order_info', {}).get('date')
        services = order_data.get('services', [])
        total_cost = order_data.get('totals', {}).get('total_cost', 0)
        
        if not event_date:
            return results
        
        try:
            event_datetime = datetime.strptime(event_date, '%Y-%m-%d')
            now = datetime.now()
            hours_until_event = (event_datetime - now).total_seconds() / 3600
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            has_service = len(services) > 0
            required_hours = BusinessStandards.TIMING_REQUIREMENTS['no_service']
            
            if has_service:
                if total_cost > 60000:
                    required_hours = BusinessStandards.TIMING_REQUIREMENTS['service_premium']
                else:
                    required_hours = BusinessStandards.TIMING_REQUIREMENTS['service_standard']
            
            if hours_until_event < required_hours:
                results.append(ValidationResult(
                    level=ValidationLevel.WARNING,
                    message=f"‚ö†Ô∏è –ú–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {hours_until_event:.0f}—á < {required_hours}—á",
                    field="timing",
                    recommendation=f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞ {required_hours} —á–∞—Å–æ–≤"
                ))
            else:
                results.append(ValidationResult(
                    level=ValidationLevel.INFO,
                    message=f"‚úÖ –í—Ä–µ–º—è –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: {hours_until_event:.0f}—á",
                    field="timing",
                    recommendation="–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã"
                ))
                
        except ValueError:
            results.append(ValidationResult(
                level=ValidationLevel.ERROR,
                message="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã",
                field="event_date",
                recommendation="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD"
            ))
        
        return results

class MenuValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–æ—Å—Ç–∞–≤–∞ –º–µ–Ω—é"""
    
    @staticmethod
    def validate(order_data: Dict[str, Any]) -> List[ValidationResult]:
        results = []
        
        menu_items = order_data.get('menu_items', [])
        
        if not menu_items:
            results.append(ValidationResult(
                level=ValidationLevel.ERROR,
                message="‚ùå –ú–µ–Ω—é –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                field="menu_items",
                recommendation="–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –≤ –∑–∞–∫–∞–∑"
            ))
            return results
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –º–µ–Ω—é
        categories = set()
        for item in menu_items:
            category = item.get('category', 'unknown')
            categories.add(category)
        
        if len(categories) < 2:
            results.append(ValidationResult(
                level=ValidationLevel.WARNING,
                message="‚ö†Ô∏è –ú–∞–ª–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤ –º–µ–Ω—é",
                field="menu_composition",
                recommendation="–î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
            ))
        else:
            results.append(ValidationResult(
                level=ValidationLevel.INFO,
                message=f"‚úÖ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é: {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                field="menu_composition",
                recommendation="–•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –±–ª—é–¥"
            ))
        
        return results